 - 파이썬 프로그렘에서는 2000만번~ 1억번의 연산을 1초의 수행시간으로 예측한다.
 - 시간복잡도 (빅오 표기법)
   - 빅-오메가 : 최선일때
   - 빅-세타  : 보통일때
   - 빅-오    : 최악일때
*코딩테스트는 모든 케이스를 통과해야만 합격으로 판단하므로 시간 복잡도를 판단할 때는 최악(빅-오)일 때 를 염두 해야함.

 - 시간 복잡도 도출 기준
   1.상수는 시간 복잡도 계산에서 제외한다
   2.가장 많이 중첩된 반복문의 수행 횟수가 시간 복잡도의 기준이 된다.
*코테에서는 일반적으로 상수를 한다.
 시간복잡도는 가장 많이 중첩된 반복문 기준으로 도출한다.

숫자의 합구하기 35p 백준11720번
n= input()
num = list(input())
sum = 0
for i in num:
  sum = sum +int(i)
print(sum)  

평균 구하기 38p 백준1546번
n = input()
avg =list(map(int, input().split()))
myavg = max(avg)
sum = sum(avg)  
print(sum*100/myavg/int(n))

구간 합 구하기 1 백준 11659번 복습필요
n, m = map(int, input().split())
numbers = list(map(int, input().split()))
prefix_sum = [0]
temp = 0

for i in numbers:
   temp = temp + i
   prefix_sum.append(temp)

for i in range(m):
  s,e = map(int, input().split())
  print(prefix_sum[e] - prefix_sum[s-1])
