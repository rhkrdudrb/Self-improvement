## 문제 ##
#어떠한 수 n이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다 단, 두 번째 연산은 n이 k로 나누어 떨어질 때만 선택할수있습니다
# 1. n에서 1을 뺍니다
# 2. n을 k로 나눕니다.
# 예를 들어 n이 17 , k가 4라고 가정 합시다. 이때 1번의 과정을 한 번 수행하면 n은 16이 됩니다. 이후에 2번의 과정을 두 번 수행하면 n은 1이 됩니다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 됩니다. 이는 b을 1로 만드는 최소 횟수 입니다.
#n과 k가 주어질 때 n이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하시오
# 중요! 정당성 분석
# 가능하면 최대한 많이 나누는 작업이 최적의 값을 항상 보장하냐?
#n이 아무리 큰 수여도, k로 계속 나눈다면 기하급수적으로 빠르게 줄일수 있다
#다시 말해 k가 2이상이기만 하면, k로 나누는 것이 1을 빼는 것 보다 항상 빠르게 n을 줄일 수 있습니다 또한 n은 항상 1에 도달하게 됩니다
print('ss')
n, k = map(int, input().split())
result = 0

while True:
    #n이 k로 나누어 떨어지는 수가 될 때 까지 빼기
    target = (n // k) * k
    result += (n - target)
    n = target
    # n이 k보다 작을 때 (더 이상 나눌 수 없을 때) 반복문 탈출
    if n < k:
        break
        # K로 나누기
        result += 1
        n //= k
# 마지막으로 남은 수에 대하여 1씩 빼기
    result += (n - 1)
print(result)
