## 그리디 알고리즘 ##
#그리디 알고리즘(탐욕법)은 현재 상황에서 지금 당장 좋은것만 고르는 방법을 의미
#일반적인 그리디 알고리즘은 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력을 요구한다.
#그리디 해법은 그 정당성 분석이 중요하다 단순히 가장 좋아보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토한다
#----------------------------------------------------------------------------------------------------------------#
# 일반적인 상황에서 그리디 알고리즘은 최적의 값을 보장할 수 없을 때가 많다 하지만 코테에서는 대부분의 그리디 문제는 탐욕법으로 얻은 값이 최적의 값이 되는 상황에서 이를 추론 할 수 있어야 풀리도록 출제됨

#문제 1
# 당신은 음식점의 계산을 도와주는 점원이다 카운터에는 거스름돈을 사용할 500원, 100원, 50원, 10원 동전이 무한히 존재한다고 가정한다 손님에게 거슬러 주어야 할 돈이 n원일때 거슬러 주어야 할 동전의 최소 개수를 구하세요. 단, 거슬러 줘야 할 돈 n은 항상 10의 배수다
#해결 아이디어
#최적의 값을 빠르게 구하기 위해서는 가장 큰 화폐 단위부터 거슬러 준다
#n원을 거슬러 줘야 할 때, 가장 먼저 500원으로 거슬러 줄 수 있을 만큼 거슬러 준다 이후에 100원,50원,10원 짜리 동전을 차례대로 거슬러 줄 수 있을 만큼 거슬러 준다
# n = 1,260일 때의 예시
# 중요! 정당성 분석
#가장 큰 화폐 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유는 뭘까? 가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문이다
#만약에 800원을 거슬러 주어야 하는데 화폐 단위가 500원, 400원, 100원이라면 어떻게 될까요?
#그리디 알고리즘 문제에서는 이처럼 문제 풀이를 위한 최소한의 아이디어를 떠올리고 이것이 정당한지 검토할 수 있어야한다
n = 1260
count = 0
#큰 단위의 화폐부터 차례대로 확인하기
array =[500,100,50,10]
for coin in array:
  count += n // coin # 해당 화폐로 거슬러 줄 수 있는 동전의 개수 세기
  n %= coin

print(count)
